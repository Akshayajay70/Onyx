<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Product Management</title>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
      .image-preview {
        position: relative;
        overflow: hidden;
        width: 100%;
        height: 0;
        padding-bottom: 100%; /* Maintain a square aspect ratio */
      }

      .image-preview img {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
    </style>
  </head>
  <body class="mybg-green text-white min-h-screen">
    <%- include("../partials/sidebar") %>

    <div class="lg:ml-64 transition-all" id="main-content">
      <header class="flex items-center justify-between mb-8 p-4 lg:p-8 border-b border-gray-700">
        <button id="toggleSidebar" class="text-white lg:hidden">
          <i class="fas fa-bars"></i>
        </button>
        <h1 class="text-2xl font-semibold text-gray-200">Product Management</h1>
        <button id="addProductBtn" class="bg-green-600 hover:bg-green-500 text-white font-medium py-2 px-6 rounded-lg shadow transition duration-300">
          Add New Product
        </button>
      </header>

      <main class="p-4 lg:p-8">
        <div class="bg-zinc-800 rounded-lg p-6 overflow-x-auto">
          <table class="min-w-full text-left text-gray-400 table-auto">
            <thead>
              <tr class="border-b border-gray-700">
                <th class="py-3 px-4">Product Name</th>
                <th class="py-3 px-4">Brand</th>
                <th class="py-3 px-4">Category</th>
                <th class="py-3 px-4">Gender</th>
                <th class="py-3 px-4">Price</th>
                <th class="py-3 px-4">Stock</th>
                <th class="py-3 px-4">Color</th>
                <th class="py-3 px-4">Description</th>
                <th class="py-3 px-4">Status</th>
                <th class="py-3 px-4">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% products.forEach((product) => { %>
              <tr class="border-b border-gray-700 hover:bg-gray-700 transition">
                <td class="py-3 px-4">
                  <div class="font-medium"><%= product.productName %></div>
                </td>
                <td class="py-3 px-4">
                  <div class="font-medium"><%= product.brand %></div>
                </td>
                <td class="py-3 px-4">
                  <div class="font-medium"><%= product.categoriesId.name %></div>
                </td>
                <td class="py-3 px-4">
                  <div class="capitalize font-medium"><%= product.gender %></div>
                </td>
                <td class="py-3 px-4">
                  <div class="text-sm">
                    <div class="font-medium">₹<%= product.discountPrice %></div>
                    <div class="text-gray-500">
                      <span class="text-green-500">-<%= Math.round((product.price - product.discountPrice) / product.price * 100) %>%</span>
                      <span class="line-through">₹<%= product.price %></span>
                    </div>
                  </div>
                </td>
                <td class="py-3 px-4">
                  <div class="font-medium <%= product.stock < 10 ? 'text-red-500' : 'text-green-500' %>">
                    <%= product.stock %>
                  </div>
                </td>
                <td class="py-3 px-4">
                  <div class="font-medium"><%= product.color %></div>
                </td>
                <td class="py-3 px-4">
                  <div class="font-medium text-sm">
                    <%= product.description %>
                  </div>
                </td>
                <td class="py-3 px-4">
                  <span class="px-2 py-1 rounded-full text-xs <%= product.isActive ? 'bg-green-500' : 'bg-red-500' %>">
                    <%= product.isActive ? 'Active' : 'Inactive' %>
                  </span>
                </td>
                <td class="py-3 px-4 space-x-3 flex">
                  <button class="text-blue-500 hover:text-blue-300 transition edit-product" 
                          data-product='<%- JSON.stringify(product) %>'>
                    <i class="fas fa-edit"></i>
                  </button>
                  <button class="text-red-500 hover:text-red-300 transition delete-product" 
                          data-id="<%= product._id %>">
                    <i class="fas fa-trash"></i>
                  </button>
                  <button class="toggle-status <%= product.isActive ? 'text-gray-500' : 'text-green-500' %>" 
                          data-id="<%= product._id %>" 
                          data-active="<%= product.isActive %>">
                    <i class="fas <%= product.isActive ? 'fa-eye-slash' : 'fa-eye' %>"></i>
                  </button>
                </td>
              </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      </main>
    </div>

    <!-- Product Modal -->
    <div id="productModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
      <div class="bg-zinc-900 rounded-lg w-[90%] md:w-[800px] max-h-[90vh] overflow-y-auto p-6">
        <h2 id="modalTitle" class="text-xl font-bold text-gray-100 mb-4">Add New Product</h2>
        <form id="productForm" enctype="multipart/form-data">
          <input type="hidden" id="productId" name="productId">
          
          <div id="formErrorMessage" class="hidden bg-red-500 text-white p-3 rounded mb-4"></div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-gray-400 mb-1">Product Name</label>
              <input type="text" 
                     name="productName" 
                     id="productName" 
                     required
                     pattern="[A-Za-z\s]+"
                     oninput="this.value = capitalizeAndTrim(this.value)"
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
              <p class="text-xs text-gray-500 mt-1">Only letters and spaces allowed</p>
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Brand</label>
              <input type="text" 
                     name="brand" 
                     id="brand" 
                     required
                     pattern="[A-Za-z\s]+"
                     oninput="this.value = capitalizeAndTrim(this.value)"
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
              <p class="text-xs text-gray-500 mt-1">Only letters and spaces allowed</p>
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Gender</label>
              <select name="gender" id="gender" required
                      class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
                <option value="male">Male</option>
                <option value="female">Female</option>
                <option value="unisex">Unisex</option>
              </select>
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Category</label>
              <select name="categoriesId" id="categoriesId" required
                      class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
                <% categories.forEach(category => { %>
                  <option value="<%= category._id %>"><%= category.name %></option>
                <% }); %>
              </select>
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Color</label>
              <input type="text" 
                     name="color" 
                     id="color" 
                     required
                     pattern="[A-Za-z\s]+"
                     oninput="this.value = capitalizeAndTrim(this.value)"
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
              <p class="text-xs text-gray-500 mt-1">Only letters and spaces allowed</p>
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Price (₹)</label>
              <input type="number" name="price" id="price" min="0" step="0.01" required
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Discount Price (₹)</label>
              <input type="number" name="discountPrice" id="discountPrice" min="0" step="0.01" required
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Stock</label>
              <input type="number" name="stock" id="stock" min="0" required
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Description</label>
              <input type="text" 
                     name="description" 
                     id="variantDescription" 
                     required
                     minlength="10"
                     maxlength="25"
                     oninput="this.value = validateVariantDescription(this.value)"
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
              <p class="text-xs text-gray-500 mt-1">
                  <span id="variantCharCount">0</span>/25 characters (minimum 10)
              </p>
            </div>

            <div class="col-span-2">
              <label class="block text-gray-400 mb-1">
                Images (All 3 images are required - Max 5MB each, Square format)
              </label>
              <div class="grid grid-cols-3 gap-4">
                <% for(let i = 0; i < 3; i++) { %>
                  <div class="image-upload-container">
                    <input type="file" 
                           id="image"
                           name="images" 
                           class="product-image hidden" 
                           accept="image/*"
                           data-max-size="5120"
                           required>
                    <div class="image-preview bg-zinc-800 border-2 border-dashed border-gray-600 rounded-lg p-4 text-center cursor-pointer hover:border-green-500 transition-colors h-48">
                      <i class="fas fa-cloud-upload-alt text-3xl mb-2"></i>
                      <p class="text-sm text-gray-400">Click to upload</p>
                      <p class="text-xs text-gray-500 mt-1">Required image <%= i + 1 %></p>
                    </div>
                    <p class="error-message text-red-500 text-xs mt-1 hidden"></p>
                  </div>
                <% } %>
              </div>
            </div>
          </div>

          <div class="flex justify-end mt-6 space-x-4">
            <button type="button" id="cancelModal" 
                    class="bg-gray-700 hover:bg-gray-600 text-gray-200 font-semibold py-2 px-4 rounded-lg">
              Cancel
            </button>
            <button type="submit"
                    class="bg-green-600 hover:bg-green-500 text-white font-semibold py-2 px-4 rounded-lg">
              Save Product
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Image Cropper Modal -->
    <div id="cropperModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
      <div class="bg-zinc-900 rounded-lg p-6 w-[90%] md:w-[600px]">
        <h3 class="text-lg font-semibold mb-4 text-gray-200">Crop Image</h3>
        <div class="mb-4">
          <div id="cropperContainer" class="max-h-[400px] overflow-hidden">
            <img id="cropperImage" src="" alt="Image to crop">
          </div>
        </div>
        <div class="flex justify-end space-x-4">
          <button id="cancelCrop" class="bg-gray-700 hover:bg-gray-600 text-gray-200 font-semibold py-2 px-4 rounded-lg">
            Cancel
          </button>
          <button id="cropImage" class="bg-green-600 hover:bg-green-500 text-white font-semibold py-2 px-4 rounded-lg">
            Crop & Save
          </button>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // DOM Elements
        const productModal = document.getElementById('productModal');
        const cropperModal = document.getElementById('cropperModal');
        const addProductBtn = document.getElementById('addProductBtn');
        const cancelModal = document.getElementById('cancelModal');
        const productForm = document.getElementById('productForm');
        const modalTitle = document.getElementById('modalTitle');
        const toggleSidebar = document.getElementById('toggleSidebar');
        const mainContent = document.getElementById('main-content');
        const cropperImage = document.getElementById('cropperImage');
        const cancelCrop = document.getElementById('cancelCrop');
        const cropImage = document.getElementById('cropImage');

        let currentImageInput = null;
        let cropper = null;
        let croppedImageBlob = null;

        // Toggle Sidebar
        toggleSidebar.addEventListener('click', () => {
          mainContent.classList.toggle('lg:ml-64');
        });

        // Show Modal for New Product
        addProductBtn.addEventListener('click', () => {
          // Reset form and clear any previous data
          productForm.reset();
          document.getElementById('productId').value = '';
          modalTitle.textContent = 'Add New Product';
          
          // Clear image previews
          document.querySelectorAll('.image-preview').forEach(preview => {
            preview.innerHTML = `
              <i class="fas fa-cloud-upload-alt text-3xl mb-2"></i>
              <p class="text-sm text-gray-400">Click to upload</p>
              <p class="text-xs text-gray-500 mt-1">Required image</p>
            `;
          });

          // Reset character count
          document.getElementById('variantCharCount').textContent = '0';
          
          // Show modal
          productModal.classList.remove('hidden');
        });

        // Hide Modal
        cancelModal.addEventListener('click', () => {
          Swal.fire({
            title: 'Are you sure?',
            text: "Any unsaved changes will be lost!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#10B981',
            cancelButtonColor: '#EF4444',
            confirmButtonText: 'Yes, close it!'
          }).then((result) => {
            if (result.isConfirmed) {
              productModal.classList.add('hidden');
              productForm.reset();
            }
          });
        });

        // Handle Image Upload and Preview
        document.querySelectorAll('.product-image').forEach(input => {
          input.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
              // Validate file size
              const maxSize = input.getAttribute('data-max-size') * 1024;
              if (file.size > maxSize) {
                alert('Image size must be less than 5MB');
                input.value = '';
                return;
              }

              currentImageInput = input;
              const reader = new FileReader();
              reader.onload = (e) => {
                cropperImage.src = e.target.result;
                cropperModal.classList.remove('hidden');
                
                if (cropper) {
                  cropper.destroy();
                }
                
                cropper = new Cropper(cropperImage, {
                  aspectRatio: 1,
                  viewMode: 2,
                  crop: function(event) {
                    // Optional: Add crop event handling if needed
                  }
                });
              };
              reader.readAsDataURL(file);
            }
          });
        });

        // Cancel Crop
        cancelCrop.addEventListener('click', () => {
          cropperModal.classList.add('hidden');
          currentImageInput.value = '';
          if (cropper) {
            cropper.destroy();
            cropper = null;
          }
        });

        // Crop Image
        cropImage.addEventListener('click', async () => {
          if (!cropper) return;

          const canvas = cropper.getCroppedCanvas({
            width: 800,  
            height: 800,
          });

          // Show preview
          const preview = currentImageInput.closest('.image-upload-container').querySelector('.image-preview');
          preview.innerHTML = `<img src="${canvas.toDataURL()}" class="w-full h-full object-cover rounded">`;

          // Convert canvas to Blob
          canvas.toBlob(async (blob) => {
            // Create a new File object from the blob
            const croppedFile = new File([blob], 'cropped-image.jpg', {
              type: 'image/jpeg',
              lastModified: new Date().getTime()
            });

            // Create a new FileList-like object
            const dataTransfer = new DataTransfer();
            dataTransfer.items.add(croppedFile);
            
            // Update the file input with the cropped image
            currentImageInput.files = dataTransfer.files;
          }, 'image/jpeg', 0.9);

          cropperModal.classList.add('hidden');
          cropper.destroy();
          cropper = null;
        });

        // Handle Form Submission
        productForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          
          // Validate all required fields
          const requiredFields = {
              'productName': 'Product Name',
              'brand': 'Brand',
              'gender': 'Gender',
              'categoriesId': 'Category',
              'color': 'Color',
              'price': 'Price',
              'discountPrice': 'Discount Price',
              'stock': 'Stock',
              'variantDescription': 'Description'
          };

          // Check for empty required fields
          for (const [fieldId, fieldName] of Object.entries(requiredFields)) {
              const field = document.getElementById(fieldId);
              if (!field.value.trim()) {
                  await Swal.fire({
                      icon: 'error',
                      title: 'Required Field Missing',
                      text: `${fieldName} is required`,
                      confirmButtonColor: '#10B981'
                  });
                  field.focus();
                  return false;
              }
          }

          // Validate text fields for letters only
          const letterOnlyFields = {
              'productName': 'Product Name',
              'brand': 'Brand',
              'color': 'Color'
          };

          const letterPattern = /^[A-Za-z\s]+$/;
          for (const [fieldId, fieldName] of Object.entries(letterOnlyFields)) {
              const field = document.getElementById(fieldId);
              if (!letterPattern.test(field.value.trim())) {
                  await Swal.fire({
                      icon: 'error',
                      title: 'Invalid Input',
                      text: `${fieldName} must contain only letters and spaces`,
                      confirmButtonColor: '#10B981'
                  });
                  field.focus();
                  return false;
              }
          }

          // Validate numeric fields
          const numericFields = {
              'price': { name: 'Price', min: 0 },
              'discountPrice': { name: 'Discount Price', min: 0 },
              'stock': { name: 'Stock', min: 0 }
          };

          for (const [fieldId, config] of Object.entries(numericFields)) {
              const field = document.getElementById(fieldId);
              const value = parseFloat(field.value);
              
              if (isNaN(value) || value < config.min) {
                  await Swal.fire({
                      icon: 'error',
                      title: 'Invalid Input',
                      text: `${config.name} must be a number greater than or equal to ${config.min}`,
                      confirmButtonColor: '#10B981'
                  });
                  field.focus();
                  return false;
              }
          }

          // Validate discount price is less than regular price
          const price = parseFloat(document.getElementById('price').value);
          const discountPrice = parseFloat(document.getElementById('discountPrice').value);
          if (discountPrice >= price) {
              await Swal.fire({
                  icon: 'error',
                  title: 'Invalid Price',
                  text: 'Discount price must be less than regular price',
                  confirmButtonColor: '#10B981'
              });
              document.getElementById('discountPrice').focus();
              return false;
          }

          // Validate description length
          const description = document.getElementById('variantDescription').value.trim();
          if (description.length < 10 || description.length > 25) {
              await Swal.fire({
                  icon: 'error',
                  title: 'Invalid Description',
                  text: 'Description must be between 10 and 25 characters',
                  confirmButtonColor: '#10B981'
              });
              document.getElementById('variantDescription').focus();
              return false;
          }

          // Validate image uploads
          const imageInputs = document.querySelectorAll('input[type="file"]');
          let imageCount = 0;
          imageInputs.forEach(input => {
              if (input.files && input.files[0]) {
                  imageCount++;
              }
          });

          // Only check for required images on new product creation
          const isEditing = document.getElementById('productId').value !== '';
          if (!isEditing && imageCount !== 3) {
              await Swal.fire({
                  icon: 'error',
                  title: 'Images Required',
                  text: 'Please upload exactly 3 images',
                  confirmButtonColor: '#10B981'
              });
              return false;
          }

          // If all validation passes, show loading state and submit
          try {
              Swal.fire({
                  title: 'Processing...',
                  text: 'Please wait while we save the product',
                  allowOutsideClick: false,
                  didOpen: () => {
                      Swal.showLoading();
                  }
              });

              const formData = new FormData(this);
              const productId = document.getElementById('productId').value;
              const url = productId 
                  ? `/admin/product/edit/${productId}`
                  : '/admin/product/add';

              const response = await fetch(url, {
                  method: 'POST',
                  body: formData
              });

              if (response.ok) {
                  await Swal.fire({
                      icon: 'success',
                      title: 'Success!',
                      text: productId ? 'Product updated successfully' : 'Product added successfully',
                      confirmButtonColor: '#10B981',
                      timer: 3000
                  });
                  window.location.reload();
              } else {
                  const data = await response.json();
                  await Swal.fire({
                      icon: 'error',
                      title: 'Error',
                      text: data.message || 'Error processing request',
                      confirmButtonColor: '#10B981'
                  });
              }
          } catch (error) {
              console.error('Error:', error);
              await Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: 'An error occurred while processing your request',
                  confirmButtonColor: '#10B981'
              });
          }
        });

        // Remove the required attribute from form fields since we're handling validation with JavaScript
        document.querySelectorAll('input, select, textarea').forEach(element => {
            element.removeAttribute('required');
        });

        // Handle Product Edit
        document.querySelectorAll('.edit-product').forEach(button => {
          button.addEventListener('click', () => {
            try {
              const product = JSON.parse(button.getAttribute('data-product'));
              console.log('Editing product:', product); // Debug log

              // Update modal title
              modalTitle.textContent = 'Edit Product';
              
              // Fill form fields
              document.getElementById('productId').value = product._id;
              document.getElementById('productName').value = product.productName;
              document.getElementById('brand').value = product.brand;
              document.getElementById('gender').value = product.gender;
              document.getElementById('categoriesId').value = product.categoriesId._id;
              document.getElementById('color').value = product.color;
              document.getElementById('price').value = product.price;
              document.getElementById('discountPrice').value = product.discountPrice;
              document.getElementById('stock').value = product.stock;
              document.getElementById('variantDescription').value = product.description;
              variantCharCount.textContent = product.description.length;

              // Show existing images
              const previews = document.querySelectorAll('.image-preview');
              product.imageUrl.forEach((url, index) => {
                if (previews[index]) {
                  previews[index].innerHTML = `<img src="${url}" class="w-full h-32 object-cover rounded">`;
                  // Make image upload optional for editing
                  const fileInput = previews[index].closest('.image-upload-container').querySelector('input[type="file"]');
                  fileInput.removeAttribute('required');
                }
              });

              // Show modal
              productModal.classList.remove('hidden');
            } catch (error) {
              console.error('Error parsing product data:', error);
              Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Error loading product data',
                confirmButtonColor: '#10B981'
              });
            }
          });
        });

        // Delete Product Handler
        document.querySelectorAll('.delete-product').forEach(button => {
          button.addEventListener('click', async function() {
            const productId = this.getAttribute('data-id');
            
            const result = await Swal.fire({
              title: 'Are you sure?',
              text: "You won't be able to revert this!",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#10B981',
              cancelButtonColor: '#EF4444',
              confirmButtonText: 'Yes, delete it!'
            });

            if (result.isConfirmed) {
              try {
                const response = await fetch(`/admin/product/delete/${productId}`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

                const data = await response.json();

                if (response.ok) {
                  await Swal.fire({
                    title: 'Deleted!',
                    text: 'Product has been deleted.',
                    icon: 'success',
                    confirmButtonColor: '#10B981'
                  });
                  window.location.reload();
                } else {
                  Swal.fire({
                    title: 'Error!',
                    text: data.message || 'Error deleting product',
                    icon: 'error',
                    confirmButtonColor: '#10B981'
                  });
                }
              } catch (error) {
                console.error('Delete error:', error);
                Swal.fire({
                  title: 'Error!',
                  text: 'An error occurred while deleting the product',
                  icon: 'error',
                  confirmButtonColor: '#10B981'
                });
              }
            }
          });
        });

        // Handle Status Toggle
        document.querySelectorAll('.toggle-status').forEach(button => {
          button.addEventListener('click', async () => {
            const productId = button.dataset.id;
            const isActive = button.dataset.active === 'true';
            const newStatus = !isActive ? 'activate' : 'deactivate';
            
            const result = await Swal.fire({
              title: 'Are you sure?',
              text: `Do you want to ${newStatus} this product?`,
              icon: 'question',
              showCancelButton: true,
              confirmButtonColor: '#10B981',
              cancelButtonColor: '#6B7280',
              confirmButtonText: 'Yes, proceed!'
            });

            if (result.isConfirmed) {
              try {
                const response = await fetch(`/admin/product/toggle-status/${productId}`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ isActive: !isActive })
                });

                if (response.ok) {
                  await Swal.fire({
                    title: 'Success!',
                    text: `Product ${newStatus}d successfully`,
                    icon: 'success',
                    confirmButtonColor: '#10B981',
                    timer: 3000
                  });
                  window.location.reload();
                } else {
                  const error = await response.json();
                  Swal.fire({
                    title: 'Error!',
                    text: error.message || `Error ${newStatus}ing product`,
                    icon: 'error',
                    confirmButtonColor: '#10B981'
                  });
                }
              } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                  title: 'Error!',
                  text: 'An error occurred while updating product status',
                  icon: 'error',
                  confirmButtonColor: '#10B981'
                });
              }
            }
          });
        });

        // Image handling functions
        function handleImageUpload(input, preview, errorMessage) {
          const file = input.files[0];
          const maxSize = input.getAttribute('data-max-size') * 1024;

          errorMessage.textContent = '';
          errorMessage.classList.add('hidden');
          
          if (!file) {
            errorMessage.textContent = 'Image is required';
            errorMessage.classList.remove('hidden');
            return;
          }

          if (file.size > maxSize) {
            errorMessage.textContent = 'Image size must be less than 5MB';
            errorMessage.classList.remove('hidden');
            input.value = '';
            return;
          }

          const img = new Image();
          const reader = new FileReader();

          reader.onload = function(e) {
            img.src = e.target.result;
            img.onload = function() {
              const aspectRatio = this.width / this.height;
              if (aspectRatio < 0.8 || aspectRatio > 1.2) {
                errorMessage.textContent = 'Please use a square image (1:1 ratio)';
                errorMessage.classList.remove('hidden');
                input.value = '';
                return;
              }

              preview.innerHTML = `
                <img src="${e.target.result}" 
                     class="w-full h-full object-cover rounded">
              `;
            };
          };
          reader.readAsDataURL(file);
        }

        // Initialize image upload handlers
        document.querySelectorAll('.image-upload-container').forEach(container => {
          const preview = container.querySelector('.image-preview');
          const input = container.querySelector('input[type="file"]');
          const errorMessage = container.querySelector('.error-message');

          preview.addEventListener('click', () => input.click());
          input.addEventListener('change', () => handleImageUpload(input, preview, errorMessage));
        });

        function capitalizeAndTrim(value) {
          // Remove extra spaces and trim
          value = value.replace(/\s+/g, ' ').trim();
          
          // Capitalize first letter of each word
          return value.split(' ')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
            .join(' ');
        }

        // Form validation
        document.getElementById('productForm').addEventListener('submit', function(e) {
          const nameInput = document.getElementById('productName');
          const brandInput = document.getElementById('brand');
          const colorInput = document.getElementById('color');
          
          const letterPattern = /^[A-Za-z\s]+$/;
          let errors = [];

          if (!letterPattern.test(nameInput.value)) {
            errors.push('Product Name must contain only letters and spaces');
          }
          
          if (!letterPattern.test(brandInput.value)) {
            errors.push('Brand must contain only letters and spaces');
          }
          
          if (!letterPattern.test(colorInput.value)) {
            errors.push('Color must contain only letters and spaces');
          }

          if (errors.length > 0) {
            e.preventDefault();
            showValidationError(errors.join('\n'));
            return false;
          }

          // Capitalize and trim all text inputs before submission
          nameInput.value = capitalizeAndTrim(nameInput.value);
          brandInput.value = capitalizeAndTrim(brandInput.value);
          colorInput.value = capitalizeAndTrim(colorInput.value);
        });

        // Initialize all text inputs with proper formatting
        document.querySelectorAll('input[type="text"]').forEach(input => {
          input.addEventListener('blur', function() {
            this.value = capitalizeAndTrim(this.value);
          });
        });

        // Character counter for variant description
        const variantDescField = document.getElementById('variantDescription');
        const variantCharCount = document.getElementById('variantCharCount');

        function validateVariantDescription(value) {
            // Update character count
            variantCharCount.textContent = value.length;
            
            // Trim and limit length
            value = value.trim();
            if (value.length > 25) {
                value = value.substring(0, 25);
            }
            
            return value;
        }

        variantDescField.addEventListener('input', function() {
            variantCharCount.textContent = this.value.length;
        });

        // Form submission handler (update the existing one)
        async function submitForm(form) {
          try {
            const formData = new FormData(form);
            const productId = document.getElementById('productId').value;
            
            // Show loading state
            Swal.fire({
              title: 'Processing...',
              text: 'Please wait while we save the product',
              allowOutsideClick: false,
              didOpen: () => {
                Swal.showLoading();
              }
            });

            const url = productId 
              ? `/admin/product/edit/${productId}`
              : '/admin/product/add';

            const response = await fetch(url, {
              method: 'POST',
              body: formData
            });

            if (response.ok) {
              await Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: productId ? 'Product updated successfully' : 'Product added successfully',
                confirmButtonColor: '#10B981',
                timer: 3000
              });
              window.location.reload();
            } else {
              const data = await response.json();
              await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message || 'Error processing request',
                confirmButtonColor: '#10B981'
              });
            }
          } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'An error occurred while processing your request',
              confirmButtonColor: '#10B981'
            });
          }
        }

        // Replace form validation alerts
        function showValidationError(message) {
          Swal.fire({
            title: 'Validation Error',
            text: message,
            icon: 'error',
            confirmButtonColor: '#10B981'
          });
        }
      });
    </script>
  </body>
</html>
