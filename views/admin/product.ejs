<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Product Management</title>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <style>
      .image-preview {
        position: relative;
        overflow: hidden;
        width: 100%;
        height: 0;
        padding-bottom: 100%; /* Maintain a square aspect ratio */
      }

      .image-preview img {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 100%;
        height: 100%;
        object-fit: cover;
      }
    </style>
  </head>
  <body class="mybg-green text-white min-h-screen">
    <%- include("../partials/sidebar") %>

    <div class="lg:ml-64 transition-all" id="main-content">
      <header class="flex items-center justify-between mb-8 p-4 lg:p-8 border-b border-gray-700">
        <button id="toggleSidebar" class="text-white lg:hidden">
          <i class="fas fa-bars"></i>
        </button>
        <h1 class="text-2xl font-semibold text-gray-200">Product Management</h1>
        <button id="addProductBtn" class="bg-green-600 hover:bg-green-500 text-white font-medium py-2 px-6 rounded-lg shadow transition duration-300">
          Add New Product
        </button>
      </header>

      <main class="p-4 lg:p-8">
        <div class="bg-zinc-800 rounded-lg p-6 overflow-x-auto">
          <table class="min-w-full text-left text-gray-400 table-auto">
            <thead>
              <tr class="border-b border-gray-700">
                <th class="py-3 px-4">Product Name</th>
                <th class="py-3 px-4">Brand</th>
                <th class="py-3 px-4">Category</th>
                <th class="py-3 px-4">Gender</th>
                <th class="py-3 px-4">Price</th>
                <th class="py-3 px-4">Stock</th>
                <th class="py-3 px-4">Status</th>
                <th class="py-3 px-4">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% products.forEach((product) => { %>
              <tr class="border-b border-gray-700 hover:bg-gray-700 transition">
                <td class="py-3 px-4"><%= product.productName %></td>
                <td class="py-3 px-4"><%= product.brand %></td>
                <td class="py-3 px-4"><%= product.categoriesId.name %></td>
                <td class="py-3 px-4 capitalize"><%= product.gender %></td>
                <td class="py-3 px-4">₹<%= product.price %></td>
                <td class="py-3 px-4"><%= product.stock %></td>
                <td class="py-3 px-4">
                  <span class="px-2 py-1 rounded-full text-xs <%= product.isActive ? 'bg-green-500' : 'bg-red-500' %>">
                    <%= product.isActive ? 'Active' : 'Inactive' %>
                  </span>
                </td>
                <td class="py-3 px-4 space-x-3 flex">
                  <button class="text-blue-500 hover:text-blue-300 transition edit-product" 
                          data-product='<%- JSON.stringify(product) %>'>
                    <i class="fas fa-edit"></i>
                  </button>
                  <button class="text-red-500 hover:text-red-300 transition delete-product" 
                          data-id="<%= product._id %>">
                    <i class="fas fa-trash"></i>
                  </button>
                  <button class="toggle-status <%= product.isActive ? 'text-gray-500' : 'text-green-500' %>" 
                          data-id="<%= product._id %>" 
                          data-active="<%= product.isActive %>">
                    <i class="fas <%= product.isActive ? 'fa-eye-slash' : 'fa-eye' %>"></i>
                  </button>
                </td>
              </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      </main>
    </div>

    <!-- Product Modal -->
    <div id="productModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
      <div class="bg-zinc-900 rounded-lg w-[90%] md:w-[800px] max-h-[90vh] overflow-y-auto p-6">
        <h2 id="modalTitle" class="text-xl font-bold text-gray-100 mb-4">Add New Product</h2>
        <form id="productForm" enctype="multipart/form-data">
          <input type="hidden" id="productId" name="productId">
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-gray-400 mb-1">Product Name</label>
              <input type="text" name="productName" id="productName" required
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Brand</label>
              <input type="text" name="brand" id="brand" required
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Gender</label>
              <select name="gender" id="gender" required
                      class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
                <option value="male">Male</option>
                <option value="female">Female</option>
                <option value="unisex">Unisex</option>
              </select>
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Category</label>
              <select name="categoriesId" id="categoriesId" required
                      class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
                <% categories.forEach(category => { %>
                  <option value="<%= category._id %>"><%= category.name %></option>
                <% }); %>
              </select>
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Color</label>
              <input type="text" name="color" id="color" required
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Price (₹)</label>
              <input type="number" name="price" id="price" min="0" step="0.01" required
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Discount Price (₹)</label>
              <input type="number" name="discountPrice" id="discountPrice" min="0" step="0.01" required
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
            </div>

            <div>
              <label class="block text-gray-400 mb-1">Stock</label>
              <input type="number" name="stock" id="stock" min="0" required
                     class="w-full bg-zinc-800 border border-gray-700 rounded px-3 py-2 focus:ring-2 focus:ring-green-500 focus:outline-none text-gray-200">
            </div>

            <div class="col-span-2">
              <label class="block text-gray-400 mb-1">
                Images (Select up to 3 images - Max 5MB each, Square format recommended)
              </label>
              <div class="grid grid-cols-3 gap-4">
                <% for(let i = 0; i < 3; i++) { %>
                  <div class="image-upload-container">
                    <input type="file" 
                           name="images" 
                           class="product-image hidden" 
                           accept="image/*"
                           data-max-size="5120" <!-- 5MB in KB -->
                           required>
                    <div class="image-preview bg-zinc-800 border-2 border-dashed border-gray-600 rounded-lg p-4 text-center cursor-pointer hover:border-green-500 transition-colors h-48">
                      <i class="fas fa-cloud-upload-alt text-3xl mb-2"></i>
                      <p class="text-sm text-gray-400">Click to upload</p>
                      <p class="text-xs text-gray-500 mt-1">Max 5MB, Square format</p>
                    </div>
                    <p class="error-message text-red-500 text-xs mt-1 hidden"></p>
                  </div>
                <% } %>
              </div>
            </div>
          </div>

          <div class="flex justify-end mt-6 space-x-4">
            <button type="button" id="cancelModal" 
                    class="bg-gray-700 hover:bg-gray-600 text-gray-200 font-semibold py-2 px-4 rounded-lg">
              Cancel
            </button>
            <button type="submit"
                    class="bg-green-600 hover:bg-green-500 text-white font-semibold py-2 px-4 rounded-lg">
              Save Product
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Image Cropper Modal -->
    <div id="cropperModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center">
      <div class="bg-zinc-900 rounded-lg p-6 w-[90%] md:w-[600px]">
        <div class="mb-4">
          <div id="cropperContainer" class="max-h-[400px] overflow-hidden">
            <img id="cropperImage" src="" alt="Image to crop">
          </div>
        </div>
        <div class="flex justify-end space-x-4">
          <button id="cancelCrop" class="bg-gray-700 hover:bg-gray-600 text-gray-200 font-semibold py-2 px-4 rounded-lg">
            Cancel
          </button>
          <button id="cropImage" class="bg-green-600 hover:bg-green-500 text-white font-semibold py-2 px-4 rounded-lg">
            Crop & Save
          </button>
        </div>
      </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // DOM Elements
        const productModal = document.getElementById('productModal');
        const cropperModal = document.getElementById('cropperModal');
        const addProductBtn = document.getElementById('addProductBtn');
        const cancelModal = document.getElementById('cancelModal');
        const productForm = document.getElementById('productForm');
        const modalTitle = document.getElementById('modalTitle');
        const toggleSidebar = document.getElementById('toggleSidebar');
        const mainContent = document.getElementById('main-content');
        const cropperImage = document.getElementById('cropperImage');
        const cancelCrop = document.getElementById('cancelCrop');
        const cropImage = document.getElementById('cropImage');

        let currentImageInput = null;
        let cropper = null;

        // Toggle Sidebar
        toggleSidebar.addEventListener('click', () => {
          mainContent.classList.toggle('lg:ml-64');
        });

        // Show Modal for New Product
        addProductBtn.addEventListener('click', () => {
          modalTitle.textContent = 'Add New Product';
          productForm.reset();
          document.getElementById('productId').value = '';
          productModal.classList.remove('hidden');
        });

        // Hide Modal
        cancelModal.addEventListener('click', () => {
          productModal.classList.add('hidden');
        });

        // Handle Image Upload and Preview
        document.querySelectorAll('.product-image').forEach(input => {
          input.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
              currentImageInput = input;
              const reader = new FileReader();
              reader.onload = (e) => {
                cropperImage.src = e.target.result;
                cropperModal.classList.remove('hidden');
                if (cropper) {
                  cropper.destroy();
                }
                cropper = new Cropper(cropperImage, {
                  aspectRatio: 1,
                  viewMode: 2,
                });
              };
              reader.readAsDataURL(file);
            }
          });
        });

        // Cancel Crop
        cancelCrop.addEventListener('click', () => {
          cropperModal.classList.add('hidden');
          currentImageInput.value = '';
        });

        // Crop Image
        cropImage.addEventListener('click', () => {
          const croppedCanvas = cropper.getCroppedCanvas();
          const preview = currentImageInput.nextElementSibling;
          preview.innerHTML = '';
          preview.appendChild(croppedCanvas);
          cropperModal.classList.add('hidden');
        });

        // Handle Form Submission
        productForm.addEventListener('submit', async (e) => {
          e.preventDefault();
          const formData = new FormData(productForm);
          const productId = document.getElementById('productId').value;
          
          try {
            const url = productId 
              ? `/admin/product/edit/${productId}` // Edit existing product
              : '/admin/product/add'; // Add new product
              
            const response = await fetch(url, {
              method: 'POST', // Both add and edit use POST
              body: formData
            });

            if (response.ok) {
              window.location.reload();
            } else {
              const error = await response.json();
              alert(error.message || 'Error processing request');
            }
          } catch (error) {
            console.error('Error:', error);
            alert('An error occurred while processing your request');
          }
        });

        // Handle Product Edit
        document.querySelectorAll('.edit-product').forEach(button => {
          button.addEventListener('click', () => {
            try {
              const product = JSON.parse(button.getAttribute('data-product'));
              console.log('Editing product:', product); // Debug log

              // Update modal title
              modalTitle.textContent = 'Edit Product';
              
              // Fill form fields
              document.getElementById('productId').value = product._id;
              document.getElementById('productName').value = product.productName;
              document.getElementById('brand').value = product.brand;
              document.getElementById('gender').value = product.gender;
              document.getElementById('categoriesId').value = product.categoriesId._id;
              document.getElementById('color').value = product.varientId.color;
              document.getElementById('price').value = product.varientId.price;
              document.getElementById('discountPrice').value = product.varientId.discountPrice;
              document.getElementById('stock').value = product.varientId.stock;

              // Show existing images
              const previews = document.querySelectorAll('.image-preview');
              product.varientId.imageUrl.forEach((url, index) => {
                if (previews[index]) {
                  previews[index].innerHTML = `<img src="${url}" class="w-full h-32 object-cover rounded">`;
                  // Make image upload optional for editing
                  const fileInput = previews[index].closest('.image-upload-container').querySelector('input[type="file"]');
                  fileInput.removeAttribute('required');
                }
              });

              // Show modal
              productModal.classList.remove('hidden');
            } catch (error) {
              console.error('Error parsing product data:', error);
              alert('Error loading product data');
            }
          });
        });

        // Delete Product Handler
        document.querySelectorAll('.delete-product').forEach(button => {
          button.addEventListener('click', async function() {
            const productId = this.getAttribute('data-id');
            console.log('Attempting to delete product:', productId); // Debug log
            
            if (confirm('Are you sure you want to delete this product?')) {
              try {
                const response = await fetch(`/admin/product/delete/${productId}`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });

                console.log('Delete response status:', response.status); // Debug log

                const data = await response.json();
                console.log('Delete response data:', data); // Debug log

                if (response.ok) {
                  alert('Product deleted successfully');
                  window.location.reload();
                } else {
                  alert(data.message || 'Error deleting product');
                }
              } catch (error) {
                console.error('Delete error:', error); // Detailed error log
                alert('An error occurred while deleting the product. Check console for details.');
              }
            }
          });
        });

        // Handle Status Toggle
        document.querySelectorAll('.toggle-status').forEach(button => {
          button.addEventListener('click', async () => {
            const productId = button.dataset.id;
            const isActive = button.dataset.active === 'true';
            
            try {
              const response = await fetch(`/admin/product/toggle-status/${productId}`, {
                method: 'POST', // Changed to POST
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ isActive: !isActive })
              });

              if (response.ok) {
                window.location.reload();
              } else {
                const error = await response.json();
                alert(error.message || 'Error toggling product status');
              }
            } catch (error) {
              console.error('Error:', error);
              alert('An error occurred while toggling product status');
            }
          });
        });

        // Image handling functions
        function handleImageUpload(input, preview, errorMessage) {
          const file = input.files[0];
          const maxSize = input.getAttribute('data-max-size') * 1024; // Convert KB to bytes

          // Reset error message
          errorMessage.textContent = '';
          errorMessage.classList.add('hidden');
          
          if (file) {
            // Check file size
            if (file.size > maxSize) {
              errorMessage.textContent = 'Image size must be less than 5MB';
              errorMessage.classList.remove('hidden');
              input.value = '';
              return;
            }

            // Check image dimensions
            const img = new Image();
            const reader = new FileReader();

            reader.onload = function(e) {
              img.src = e.target.result;
              img.onload = function() {
                // Check aspect ratio
                const aspectRatio = this.width / this.height;
                if (aspectRatio < 0.8 || aspectRatio > 1.2) {
                  errorMessage.textContent = 'Please use a square image (1:1 ratio)';
                  errorMessage.classList.remove('hidden');
                  input.value = '';
                  return;
                }

                // If all checks pass, show preview
                preview.innerHTML = `
                  <img src="${e.target.result}" 
                       class="w-full h-full object-cover rounded">
                `;
              };
            };
            reader.readAsDataURL(file);
          }
        }

        // Update image upload event listeners
        document.querySelectorAll('.image-upload-container').forEach(container => {
          const preview = container.querySelector('.image-preview');
          const input = container.querySelector('input[type="file"]');
          const errorMessage = container.querySelector('.error-message');

          preview.addEventListener('click', () => input.click());

          input.addEventListener('change', () => {
            handleImageUpload(input, preview, errorMessage);
          });
        });
      });
    </script>
  </body>
</html>
