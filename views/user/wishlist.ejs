<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>My Wishlist - Onyx</title>
    <link rel="stylesheet" href="/tailwindcss/output.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body class="bg-gray-100">
    <%- include("../partials/nav") %>

    <div class="container mx-auto px-4 py-8 mt-28">
        <h1 class="text-2xl font-bold text-gray-800 mb-6">My Wishlist (<span id="wishlist-count"><%= wishlist.length %></span> items)</h1>

        <% if (wishlist.length === 0) { %>
            <div class="bg-white rounded-2xl shadow-lg p-8 text-center">
                <div class="text-gray-500 mb-4">
                    <i class="fas fa-heart text-4xl"></i>
                </div>
                <h2 class="text-xl font-semibold text-gray-800 mb-2">Your wishlist is empty</h2>
                <p class="text-gray-600 mb-6">Start adding items you love to your wishlist</p>
                <a href="/shop" class="inline-block bg-black text-white px-6 py-3 rounded-xl hover:bg-gray-800 transition-colors">
                    Continue Shopping
                </a>
            </div>
        <% } else { %>
            <div id="wishlist-grid" 
                 class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4" 
                 data-total-items="<%= wishlist.length %>">
                <% wishlist.forEach((item, index) => { %>
                    <div class="bg-white rounded-lg shadow-sm overflow-hidden group relative flex flex-col h-full <%= index >= 4 ? 'hidden' : '' %>" 
                         id="wishlist-item-<%= item.productId._id %>"
                         data-index="<%= index %>">
                        <% if (item.productId && item.productId.isActive) { %>
                            <a href="/product/<%= item.productId._id %>" class="block flex-grow">
                        <% } else { %>
                            <div onclick="showUnavailableMessage()" class="block flex-grow cursor-not-allowed">
                        <% } %>
                            <div class="relative aspect-[4/5] overflow-hidden">
                                <img 
                                    src="<%= item.productId.imageUrl[0] %>" 
                                    alt="<%= item.productId.productName %>"
                                    class="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                                >
                                <% if (item.productId && !item.productId.isActive) { %>
                                    <div class="absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center">
                                        <span class="text-white text-xs font-medium px-2 py-0.5 rounded-full bg-black bg-opacity-75">
                                            Unavailable
                                        </span>
                                    </div>
                                <% } %>
                            </div>
                            
                            <div class="p-2">
                                <h3 class="text-sm font-medium text-gray-800 truncate">
                                    <%= item.productId.productName %>
                                </h3>
                                <p class="text-sm text-gray-600 mt-1">â‚¹<%= item.productId.price %></p>
                            </div>
                        <% if (item.productId && item.productId.isActive) { %>
                            </a>
                        <% } else { %>
                            </div>
                        <% } %>
                        
                        <div class="p-2 bg-white border-t mt-auto">
                            <div class="flex items-center gap-1">
                                <% if (item.productId && !item.productId.isActive) { %>
                                    <button 
                                        class="bg-gray-300 text-gray-600 px-3 py-1.5 rounded text-xs font-medium cursor-not-allowed flex-1"
                                        disabled
                                    >
                                        Unavailable
                                    </button>
                                <% } else if (item.productId.stock > 0) { %>
                                    <button 
                                        onclick="addToCart('<%= item.productId._id %>')"
                                        class="bg-black text-white px-3 py-1.5 rounded text-xs font-medium hover:bg-gray-800 transition-colors flex-1"
                                    >
                                        Add to Cart
                                    </button>
                                <% } else { %>
                                    <button 
                                        class="bg-gray-300 text-gray-600 px-3 py-1.5 rounded text-xs font-medium cursor-not-allowed flex-1"
                                        disabled
                                    >
                                        Out of Stock
                                    </button>
                                <% } %>
                            </div>
                        </div>

                        <button 
                            onclick="removeFromWishlist('<%= item.productId._id %>')"
                            class="absolute top-2 right-2 bg-white rounded-full p-1.5 shadow-sm hover:bg-red-50 transition-colors"
                        >
                            <i class="fas fa-heart text-red-500 text-sm"></i>
                        </button>
                    </div>
                <% }); %>
            </div>

            <% if (wishlist.length > 4) { %>
                <div class="text-center mt-8">
                    <button id="load-more" 
                            class="bg-white text-gray-800 px-6 py-2 rounded-lg shadow-sm hover:bg-gray-50 transition-colors border border-gray-200">
                        Show More Items 
                    </button>
                </div>
            <% } %>
        <% } %>
    </div>

    <%- include('../partials/footer') %>

    <div id="toast-container" class="fixed top-4 right-4 z-50 flex flex-col gap-2"></div>

    <script>
        // Custom toast notification function
        function showToast(type, title, message) {
            const container = document.getElementById('toast-container');
            const toast = document.createElement('div');
            
            // Set toast classes based on type
            const baseClasses = 'flex items-center p-4 rounded-lg shadow-lg transform transition-all duration-300 ease-out translate-x-full';
            const typeClasses = {
                success: 'bg-green-500 text-white',
                error: 'bg-red-500 text-white',
                warning: 'bg-yellow-500 text-white',
                info: 'bg-blue-500 text-white'
            };
            
            toast.className = `${baseClasses} ${typeClasses[type]}`;
            toast.innerHTML = `
                <div class="flex-shrink-0 mr-3">
                    ${type === 'success' ? '<i class="fas fa-check-circle"></i>' :
                      type === 'error' ? '<i class="fas fa-times-circle"></i>' :
                      type === 'warning' ? '<i class="fas fa-exclamation-circle"></i>' :
                      '<i class="fas fa-info-circle"></i>'}
                </div>
                <div class="flex-1">
                    <p class="font-medium">${title}</p>
                    ${message ? `<p class="text-sm opacity-90">${message}</p>` : ''}
                </div>
                <button class="ml-4 hover:opacity-80" onclick="this.parentElement.remove()">
                    <i class="fas fa-times"></i>
                </button>
            `;
            
            container.appendChild(toast);
            
            // Animate in
            requestAnimationFrame(() => {
                toast.classList.remove('translate-x-full');
            });
            
            // Auto remove after 3 seconds
            setTimeout(() => {
                toast.classList.add('translate-x-full');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        async function removeFromWishlist(productId) {
            try {
                event.preventDefault();
                event.stopPropagation();

                const response = await fetch(`/wishlist/remove/${productId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();

                if (data.success) {
                    const item = document.getElementById(`wishlist-item-${productId}`);
                    item.classList.add('transform', 'transition-all', 'duration-300', 'opacity-0', 'scale-95');
                    
                    setTimeout(() => {
                        item.remove();
                        if (document.querySelectorAll('[id^="wishlist-item-"]').length === 0) {
                            window.location.reload();
                        }
                    }, 300);

                    showToast('success', 'Removed from wishlist');
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                showToast('error', 'Error', error.message || 'Error removing from wishlist');
            }
        }

        async function addToCart(productId) {
            try {
                event.preventDefault();
                event.stopPropagation();

                const response = await fetch('/cart/add', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId, quantity: 1 })
                });

                const data = await response.json();
                
                if (data.message && data.message.includes('not available')) {
                    showToast('error', 'Product Unavailable', 'This product is currently not available');
                    setTimeout(() => window.location.reload(), 3000);
                    return;
                }
                
                if (data.message && data.message.includes('added to cart')) {
                    showToast('success', 'Success', data.message);
                } else if (data.message && data.message.includes('Maximum limit')) {
                    showToast('warning', 'Quantity Limit Reached', data.message);
                } else {
                    throw new Error(data.message || 'Failed to add to cart');
                }
            } catch (error) {
                console.error('Cart error:', error);
                showToast('error', 'Error', error.message || 'Error adding to cart');
            }
        }

        async function toggleWishlist(productId) {
            try {
                const checkResponse = await fetch(`/wishlist/check/${productId}`);
                const checkData = await checkResponse.json();

                if (checkData.success) {
                    if (checkData.isInWishlist) {
                        const response = await fetch(`/wishlist/remove/${productId}`, {
                            method: 'DELETE'
                        });
                        const data = await response.json();

                        if (data.success) {
                            document.querySelector(`#wishlist-btn-${productId} i`)
                                .classList.replace('fas', 'far');
                            showToast('success', 'Removed from wishlist');
                        }
                    } else {
                        const response = await fetch('/wishlist/add', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ productId })
                        });
                        const data = await response.json();

                        if (data.success) {
                            document.querySelector(`#wishlist-btn-${productId} i`)
                                .classList.replace('far', 'fas');
                            showToast('success', 'Added to wishlist');
                        }
                    }
                }
            } catch (error) {
                console.error('Wishlist toggle error:', error);
                showToast('error', 'Error', 'Error updating wishlist');
            }
        }

        function showUnavailableMessage() {
            showToast('info', 'Product Unavailable', 'This product is currently not available in our store');
        }

        document.addEventListener('DOMContentLoaded', function() {
            const ITEMS_PER_LOAD = 5;
            let visibleItems = ITEMS_PER_LOAD;
            const totalItems = parseInt(document.getElementById('wishlist-grid').dataset.totalItems);
            const loadMoreBtn = document.getElementById('load-more');
            const itemsShownSpan = document.getElementById('items-shown');
            const wishlistGrid = document.getElementById('wishlist-grid');

            if (loadMoreBtn) {
                loadMoreBtn.addEventListener('click', function() {
                    const hiddenItems = wishlistGrid.querySelectorAll('.hidden');
                    const itemsToShow = Array.from(hiddenItems).slice(0, ITEMS_PER_LOAD);
                    
                    itemsToShow.forEach(item => {
                        item.classList.remove('hidden');
                        // Replace custom animation with Tailwind classes
                        item.classList.add('animate-[fade-in_0.3s_ease-out]', 'opacity-0', 'translate-y-2');
                        requestAnimationFrame(() => {
                            item.classList.remove('opacity-0', 'translate-y-2');
                        });
                    });

                    visibleItems += itemsToShow.length;
                    itemsShownSpan.textContent = visibleItems;

                    // Hide button if all items are shown
                    if (visibleItems >= totalItems) {
                        loadMoreBtn.style.display = 'none';
                    }

                    // Smooth scroll to the last newly visible item
                    if (itemsToShow.length > 0) {
                        const lastNewItem = itemsToShow[itemsToShow.length - 1];
                        lastNewItem.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                    }
                });
            }

            // Update count when items are removed
            window.updateWishlistCount = function() {
                const count = document.querySelectorAll('[id^="wishlist-item-"]').length;
                document.getElementById('wishlist-count').textContent = count;
                
                // Hide load more button if not needed
                if (count <= ITEMS_PER_LOAD && loadMoreBtn) {
                    loadMoreBtn.style.display = 'none';
                }
                
                // Show empty state if no items
                if (count === 0) {
                    window.location.reload();
                }
            };

            // Add this to your existing removeFromWishlist function
            const originalRemoveFromWishlist = window.removeFromWishlist;
            window.removeFromWishlist = async function(productId) {
                await originalRemoveFromWishlist(productId);
                updateWishlistCount();
            };
        });
    </script>
</body>

</html>