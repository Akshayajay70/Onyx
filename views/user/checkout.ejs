<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="tailwindcss/output.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <title>Checkout - Onyx</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
</head>
<body class="bg-gray-100">
    <%- include("../partials/nav") %>

    <div class="container mx-auto px-4 py-8 mt-28">
        <div class="flex flex-col lg:flex-row gap-8">
            <!-- Left Section - Address and Payment -->
            <div class="lg:w-2/3">
                <!-- Address Selection -->
                <div class="bg-white p-6 rounded-2xl shadow-lg mb-6">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">Select Delivery Address</h2>
                    
                    <div class="space-y-4">
                        <% if (addresses && addresses.length > 0) { %>
                            <% addresses.forEach((address, index) => { %>
                                <div class="border rounded-lg p-4 hover:border-black transition-colors">
                                    <label class="flex items-start gap-4 cursor-pointer">
                                        <input 
                                            type="radio" 
                                            name="selectedAddress" 
                                            value="<%= address._id %>"
                                            class="mt-1"
                                            <%= index === 0 ? 'checked' : '' %>
                                        >
                                        <div>
                                            <p class="font-medium"><%= address.fullName %></p>
                                            <p class="text-gray-600"><%= address.addressLine1 %></p>
                                            <p class="text-gray-600"><%= address.addressLine2 %></p>
                                            <p class="text-gray-600"><%= address.city %>, <%= address.state %> <%= address.pincode %></p>
                                            <p class="text-gray-600">Phone: <%= address.mobileNumber %></p>
                                        </div>
                                    </label>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="text-center py-4">
                                <p class="text-gray-500 mb-4">No addresses found</p>
                            </div>
                        <% } %>
                        
                        <button 
                            onclick="window.location.href='/address'" 
                            class="w-full mt-4 bg-gray-100 text-gray-800 py-3 rounded-xl font-medium hover:bg-gray-200 transition-colors flex items-center justify-center gap-2"
                        >
                            <i class="fas fa-plus"></i>
                            Add New Address
                        </button>
                    </div>
                </div>

                <!-- Payment Method -->
                <div class="bg-white p-6 rounded-2xl shadow-lg">
                    <h2 class="text-2xl font-bold text-gray-800 mb-6">Payment Method</h2>
                    
                    <div class="space-y-4">
                        <h3 class="font-medium text-gray-800">Payment Method</h3>
                        <div class="space-y-3">
                            <!-- Wallet Payment Option -->
                            <label class="flex items-center gap-3 p-3 border rounded-lg <%= wallet.balance >= total ? 'hover:bg-gray-50' : 'opacity-60' %>">
                                <input type="radio" name="paymentMethod" value="wallet" 
                                       <%= wallet.balance >= total ? '' : 'disabled' %>>
                                <div class="flex flex-col">
                                    <span class="flex items-center gap-2">
                                        <i class="fas fa-wallet"></i> Pay using Wallet
                                        <% if (wallet.balance >= total) { %>
                                            <span class="text-xs bg-green-100 text-green-800 px-2 py-1 rounded">
                                                Sufficient Balance
                                            </span>
                                        <% } %>
                                    </span>
                                    <span class="text-sm text-gray-500">
                                        Available: ₹<%= wallet.balance.toFixed(2) %>
                                    </span>
                                </div>
                            </label>

                            <!-- Other payment methods -->
                            <label class="flex items-center gap-3 p-3 border rounded-lg hover:bg-gray-50">
                                <input type="radio" name="paymentMethod" value="cod" checked>
                                <div class="flex flex-col">
                                    <span class="flex items-center gap-2">
                                        <i class="fas fa-money-bill"></i> Cash on Delivery
                                    </span>
                                    <span class="text-sm text-gray-500">Pay when you receive the order</span>
                                </div>
                            </label>

                            <label class="flex items-center gap-3 p-3 border rounded-lg hover:bg-gray-50">
                                <input type="radio" name="paymentMethod" value="online">
                                <div class="flex flex-col">
                                    <span class="flex items-center gap-2">
                                        <i class="fas fa-credit-card"></i> Online Payment
                                    </span>
                                    <span class="text-sm text-gray-500">Pay using Card/UPI/Netbanking</span>
                                </div>
                            </label>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Section - Order Summary -->
            <div class="lg:w-1/3">
                <div class="bg-white p-6 rounded-2xl shadow-lg sticky top-28">
                    <h2 class="text-xl font-bold text-gray-800 mb-6">Order Summary</h2>
                    
                    <!-- Items Summary -->
                    <div class="space-y-4 max-h-48 overflow-y-auto mb-6">
                        <% cartItems.forEach(item => { %>
                            <div class="flex gap-4">
                                <img 
                                    src="<%= item.product.imageUrl[0] %>" 
                                    alt="<%= item.product.productName %>"
                                    class="w-16 h-16 object-cover rounded-lg"
                                >
                                <div class="flex-1">
                                    <h4 class="font-medium"><%= item.product.productName %></h4>
                                    <p class="text-gray-500 text-sm">Qty: <%= item.quantity %></p>
                                    <p class="text-gray-800">₹<%= item.subtotal %></p>
                                </div>
                            </div>
                        <% }); %>
                    </div>

                    <!-- Add this before the Price Breakdown section -->
                    <div class="mb-6">
                        <button 
                            onclick="openCouponModal()"
                            class="w-full bg-gray-100 text-gray-800 py-3 rounded-xl font-medium hover:bg-gray-200 transition-colors flex items-center justify-center gap-2"
                        >
                            <i class="fas fa-ticket-alt"></i>
                            Apply Coupon
                        </button>
                        <div id="appliedCouponInfo" class="hidden mt-3 p-3 bg-green-50 rounded-lg">
                            <div class="flex justify-between items-center">
                                <div>
                                    <p class="text-green-800 font-medium" id="appliedCouponCode"></p>
                                    <p class="text-green-600 text-sm" id="discountInfo"></p>
                                </div>
                                <button 
                                    onclick="removeCoupon()"
                                    class="text-red-500 hover:text-red-600"
                                >
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Price Breakdown -->
                    <div class="space-y-3 border-t pt-4">
                        <div class="flex justify-between text-gray-600">
                            <span>Subtotal</span>
                            <span>₹<%= total %></span>
                        </div>
                        <div id="discountRow" class="flex justify-between text-gray-600 hidden">
                            <span>Discount</span>
                            <span class="text-green-500">-₹<span id="discountAmount">0</span></span>
                        </div>
                        <div class="flex justify-between text-gray-600">
                            <span>Shipping</span>
                            <span class="text-green-500">Free</span>
                        </div>
                        <div class="flex justify-between font-bold text-lg border-t pt-3">
                            <span>Total</span>
                            <span>₹<span id="finalTotal"><%= total %></span></span>
                        </div>
                    </div>

                    <!-- Place Order Button -->
                    <button 
                        onclick="placeOrder()"
                        class="w-full bg-black text-white py-3 rounded-xl font-medium hover:bg-gray-800 transition-all duration-300 mt-6"
                    >
                        Place Order
                    </button>

                    <!-- Additional Info -->
                    <div class="mt-4 text-center text-xs text-gray-500">
                        <p class="flex items-center justify-center gap-2">
                            <i class="fas fa-shield-alt"></i>
                            Secure Checkout
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <%- include('../partials/footer') %>

    <!-- Add this coupon modal at the end of the body -->
    <div id="couponModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="fixed inset-0 flex items-center justify-center p-4">
            <div class="bg-white rounded-2xl w-full max-w-md max-h-[80vh] overflow-hidden">
                <!-- Modal Header -->
                <div class="p-4 border-b">
                    <div class="flex justify-between items-center">
                        <h3 class="text-lg font-semibold text-gray-800">Available Coupons</h3>
                        <button onclick="closeCouponModal()" class="text-gray-400 hover:text-gray-500">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>

                <!-- Modal Body -->
                <div class="overflow-y-auto p-4 space-y-4" style="max-height: calc(80vh - 120px);">
                    <!-- Available Coupons Section -->
                    <div id="activeCoupons" class="space-y-3">
                        <div id="activeCouponsList" class="space-y-3">
                            <!-- Active coupons will be inserted here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Add this section for wallet balance display -->
    <div class="mb-6 p-4 bg-gray-50 rounded-xl">
        <div class="flex justify-between items-center">
            <div>
                <h3 class="font-medium text-gray-800">Wallet Balance</h3>
                <p class="text-2xl font-bold <%= wallet.balance >= total ? 'text-green-600' : 'text-gray-600' %>">
                    ₹<%= wallet.balance.toFixed(2) %>
                </p>
            </div>
            <% if (wallet.balance < total) { %>
                <div class="text-right">
                    <p class="text-sm text-red-600 mb-2">Insufficient balance</p>
                    <button onclick="addFunds()" 
                            class="bg-black text-white px-4 py-2 rounded-lg hover:bg-gray-800 transition-colors text-sm">
                        Add Funds
                    </button>
                </div>
            <% } %>
        </div>
    </div>

    <script>
        let appliedCoupon = null;
        let currentDiscount = 0;
        const cartTotal = <%= total %>;

        function openCouponModal() {
            fetchCoupons();
            document.getElementById('couponModal').classList.remove('hidden');
        }

        function closeCouponModal() {
            document.getElementById('couponModal').classList.add('hidden');
        }

        async function fetchCoupons() {
            try {
                const response = await fetch('/checkout/available-coupons');
                const data = await response.json();

                if (data.success) {
                    renderCoupons(data.coupons);
                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error fetching coupons:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to load coupons',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 3000
                });
            }
        }

        function renderCoupons(coupons) {
            const activeCouponsList = document.getElementById('activeCouponsList');
            activeCouponsList.innerHTML = '';

            // Separate applicable and non-applicable coupons
            const applicableCoupons = coupons.filter(coupon => coupon.isApplicable);
            const nonApplicableCoupons = coupons.filter(coupon => !coupon.isApplicable);

            // Render applicable coupons first with a header
            if (applicableCoupons.length > 0) {
                activeCouponsList.innerHTML += `
                    <div class="mb-4">
                        <h4 class="text-sm font-medium text-green-600 mb-3">Available for You</h4>
                        <div class="space-y-3">
                            ${applicableCoupons.map(coupon => 
                                createCouponElement(coupon, true).outerHTML
                            ).join('')}
                        </div>
                    </div>
                `;
            }

            // Render non-applicable coupons with a header
            if (nonApplicableCoupons.length > 0) {
                activeCouponsList.innerHTML += `
                    <div>
                        ${applicableCoupons.length > 0 ? '<hr class="my-4">' : ''}
                        <h4 class="text-sm font-medium text-gray-600 mb-3">Other Coupons</h4>
                        <div class="space-y-3">
                            ${nonApplicableCoupons.map(coupon => 
                                createCouponElement(coupon, false).outerHTML
                            ).join('')}
                        </div>
                    </div>
                `;
            }

            // Show "No coupons" message if both sections are empty
            if (!applicableCoupons.length && !nonApplicableCoupons.length) {
                activeCouponsList.innerHTML = `
                    <div class="text-gray-500 text-center py-3">
                        No coupons available
                    </div>
                `;
            }
        }

        function createCouponElement(coupon, isApplicable) {
            const div = document.createElement('div');
            div.className = `p-4 border rounded-lg ${isApplicable ? 'border-green-200 bg-green-50' : 'border-gray-200 bg-gray-50'}`;
            
            div.innerHTML = `
                <div class="flex justify-between items-start">
                    <div>
                        <h3 class="font-medium ${isApplicable ? 'text-green-700' : 'text-gray-700'}">${coupon.code}</h3>
                        <p class="text-sm text-gray-600 mt-1">
                            ${coupon.discountPercentage}% OFF
                            ${coupon.maximumDiscount ? ` up to ₹${coupon.maximumDiscount}` : ''}
                        </p>
                        <p class="text-xs text-gray-500 mt-1">
                            Min purchase: ₹${coupon.minimumPurchase}
                        </p>
                        <p class="text-xs text-gray-500">
                            Valid till: ${new Date(coupon.expiryDate).toLocaleDateString()}
                        </p>
                    </div>
                    ${isApplicable ? `
                        <button onclick="applyCoupon('${coupon.code}')"
                                class="px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
                            Apply
                        </button>
                    ` : `
                        <span class="text-xs text-gray-500 italic">
                            Not applicable
                        </span>
                    `}
                </div>
            `;
            
            return div;
        }

        function getCouponInactiveReason(coupon) {
            if (coupon.minimumPurchase > cartTotal) return `Min. purchase ₹${coupon.minimumPurchase}`;
            if (coupon.totalCoupon && coupon.usedCouponCount >= coupon.totalCoupon) return 'Coupon limit reached';
            return 'Not applicable';
        }

        // Add this function to manage the Apply Coupon button state
        function toggleApplyCouponButton(disabled) {
            const applyCouponButton = document.querySelector('button[onclick="openCouponModal()"]');
            if (applyCouponButton) {
                applyCouponButton.disabled = disabled;
                if (disabled) {
                    applyCouponButton.classList.add('opacity-50', 'cursor-not-allowed');
                    applyCouponButton.classList.remove('hover:bg-gray-200');
                } else {
                    applyCouponButton.classList.remove('opacity-50', 'cursor-not-allowed');
                    applyCouponButton.classList.add('hover:bg-gray-200');
                }
            }
        }

        async function applyCoupon(couponCode) {
            try {
                // Check for empty or whitespace-only coupon code
                if (!couponCode || !couponCode.trim()) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Coupon',
                        text: 'Please enter a valid coupon code',
                        confirmButtonColor: '#3B82F6'
                    });
                    return;
                }

                // Remove leading and trailing spaces
                const trimmedCode = couponCode.trim().toUpperCase();

                const response = await fetch('/checkout/apply-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ code: trimmedCode })
                });

                const data = await response.json();

                if (data.success) {
                    // Disable the Apply Coupon button
                    toggleApplyCouponButton(true);

                    // Update UI elements
                    document.getElementById('discountRow').classList.remove('hidden');
                    document.getElementById('discountAmount').textContent = data.discount.toFixed(2);
                    document.getElementById('finalTotal').textContent = (cartTotal - data.discount).toFixed(2);
                    
                    // Show applied coupon info
                    const appliedCouponInfo = document.getElementById('appliedCouponInfo');
                    const appliedCouponCode = document.getElementById('appliedCouponCode');
                    const discountInfo = document.getElementById('discountInfo');
                    
                    appliedCouponInfo.classList.remove('hidden');
                    appliedCouponCode.textContent = trimmedCode;
                    discountInfo.textContent = `₹${data.discount.toFixed(2)} discount applied`;

                    closeCouponModal();
                } else {
                    // Error notification
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: data.message || 'Failed to apply coupon',
                        confirmButtonColor: '#3B82F6'
                    });
                }
            } catch (error) {
                console.error('Error applying coupon:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to apply coupon. Please try again.',
                    confirmButtonColor: '#3B82F6'
                });
            }
        }

        async function removeCoupon() {
            try {
                const response = await fetch('/checkout/remove-coupon', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();

                if (data.success) {
                    // Enable the Apply Coupon button
                    toggleApplyCouponButton(false);

                    // Reset UI elements
                    document.getElementById('discountRow').classList.add('hidden');
                    document.getElementById('discountAmount').textContent = '0';
                    document.getElementById('finalTotal').textContent = cartTotal.toFixed(2);
                    document.getElementById('appliedCouponInfo').classList.add('hidden');

                } else {
                    throw new Error(data.message || 'Failed to remove coupon');
                }
            } catch (error) {
                console.error('Error removing coupon:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to remove coupon. Please try again.',
                    confirmButtonColor: '#3B82F6'
                });
            }
        }

        function updateTotalWithDiscount(discount) {
            const finalTotalElement = document.getElementById('finalTotal');
            const discountElement = document.getElementById('discountAmount');
            const discountRow = document.getElementById('discountRow');
            
            if (discount > 0) {
                discountRow.classList.remove('hidden');
                discountElement.textContent = discount.toFixed(2);
                finalTotalElement.textContent = (cartTotal - discount).toFixed(2);
            } else {
                discountRow.classList.add('hidden');
                discountElement.textContent = '0';
                finalTotalElement.textContent = cartTotal.toFixed(2);
            }
        }

        async function placeOrder() {
            try {
                const selectedAddress = document.querySelector('input[name="selectedAddress"]:checked');
                if (!selectedAddress) {
                    throw new Error('Please select a delivery address');
                }

                const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;

                if (paymentMethod === 'wallet') {
                    // Handle wallet payment
                    const response = await fetch('/checkout/wallet-payment', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            addressId: selectedAddress.value
                        })
                    });

                    const data = await response.json();
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Order Placed Successfully!',
                            text: 'Payment completed using wallet balance',
                            confirmButtonText: 'View Order',
                            confirmButtonColor: '#000000'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = `/order/${data.orderId}`;
                            } else {
                                window.location.href = '/orders';
                            }
                        });
                    } else {
                        throw new Error(data.message || 'Payment failed');
                    }
                } else if (paymentMethod === 'cod') {
                    // Existing COD logic
                    const response = await fetch('/checkout/place-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            addressId: selectedAddress.value,
                            paymentMethod: 'cod'
                        })
                    });

                    const data = await response.json();
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Order Placed Successfully!',
                            confirmButtonText: 'View Order',
                            confirmButtonColor: '#000000'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = `/order/${data.orderId}`;
                            }
                        });
                    } else {
                        throw new Error(data.message);
                    }
                } else if (paymentMethod === 'online') {
                    // Create Razorpay order
                    const response = await fetch('/checkout/create-razorpay-order', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            addressId: selectedAddress.value
                        })
                    });

                    const data = await response.json();
                    if (!data.success) {
                        throw new Error(data.message);
                    }

                    // Initialize Razorpay
                    const options = {
                        key: data.key,
                        amount: data.order.amount,
                        currency: "INR",
                        name: "Onyx",
                        description: "Order Payment",
                        order_id: data.order.id,
                        handler: async function (response) {
                            try {
                                const verifyResponse = await fetch('/checkout/verify-payment', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_signature: response.razorpay_signature
                                    })
                                });

                                const verifyData = await verifyResponse.json();
                                if (verifyData.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Order Placed Successfully!',
                                        text: 'Payment completed',
                                        confirmButtonText: 'View Order',
                                        confirmButtonColor: '#000000'
                                    }).then((result) => {
                                        if (result.isConfirmed) {
                                            window.location.href = `/order/${verifyData.orderId}`;
                                        }
                                    });
                                } else {
                                    throw new Error(verifyData.message);
                                }
                            } catch (error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Payment Failed',
                                    text: error.message,
                                    confirmButtonColor: '#000000'
                                });
                            }
                        },
                        prefill: {
                            name: "<%= user.name %>",
                            email: "<%= user.email %>",
                            contact: "<%= user.phone %>"
                        },
                        theme: {
                            color: "#000000"
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.open();
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message,
                    confirmButtonColor: '#000000'
                });
            }
        }

        async function addFunds() {
            const amountNeeded = <%= total - wallet.balance %>;
            
            const { value: amount } = await Swal.fire({
                title: 'Add Funds to Wallet',
                input: 'number',
                inputLabel: `Amount needed: ₹${amountNeeded.toFixed(2)}`,
                inputValue: Math.ceil(amountNeeded),
                inputPlaceholder: 'Enter amount',
                showCancelButton: true,
                confirmButtonColor: '#000000',
                inputValidator: (value) => {
                    if (!value || value <= 0) {
                        return 'Please enter a valid amount';
                    }
                    if (value < amountNeeded) {
                        return 'Amount is less than required';
                    }
                }
            });

            if (amount) {
                try {
                    const response = await fetch('/wallet/add-funds', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ amount: parseFloat(amount) })
                    });

                    const data = await response.json();
                    if (!data.success) {
                        throw new Error(data.message);
                    }

                    const options = {
                        key: data.key,
                        amount: data.order.amount,
                        currency: "INR",
                        name: "Onyx Wallet",
                        description: "Wallet Recharge",
                        order_id: data.order.id,
                        handler: async function (response) {
                            try {
                                const verifyResponse = await fetch('/wallet/verify-recharge', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json'
                                    },
                                    body: JSON.stringify({
                                        razorpay_order_id: response.razorpay_order_id,
                                        razorpay_payment_id: response.razorpay_payment_id,
                                        razorpay_signature: response.razorpay_signature
                                    })
                                });

                                const verifyData = await verifyResponse.json();
                                if (verifyData.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Funds Added Successfully!',
                                        text: 'Your wallet has been recharged',
                                        confirmButtonColor: '#000000'
                                    }).then(() => {
                                        window.location.reload();
                                    });
                                } else {
                                    throw new Error(verifyData.message);
                                }
                            } catch (error) {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Recharge Failed',
                                    text: error.message,
                                    confirmButtonColor: '#000000'
                                });
                            }
                        },
                        prefill: {
                            name: "<%= user.name %>",
                            email: "<%= user.email %>",
                            contact: "<%= user.phone %>"
                        },
                        theme: {
                            color: "#000000"
                        }
                    };

                    const rzp = new Razorpay(options);
                    rzp.open();

                } catch (error) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: error.message || 'Failed to add funds',
                        confirmButtonColor: '#000000'
                    });
                }
            }
        }
    </script>
</body>
</html> 